var documenterSearchIndex = {"docs":
[{"location":"#ZarrDatasets","page":"Home","title":"ZarrDatasets","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Modules = [ZarrDatasets]","category":"page"},{"location":"#ZarrDatasets.ZarrDataset","page":"Home","title":"ZarrDatasets.ZarrDataset","text":"ds = ZarrDataset(url::AbstractString,mode = \"r\";\n                 _omitcode = 404,\n                 maskingvalue = missing)\nZarrDataset(f::Function,url::AbstractString,mode = \"r\";\n                 maskingvalue = missing)\n\nOpen the zarr dataset at the url or path url. Only the read-mode is currently supported. ds supports the API of the JuliaGeo/CommonDataModel.jl. The experimental _omitcode allows to work-around servers that return HTTP error different than 404 for missing chunks.\n\nExample:\n\nusing ZarrDatasets\nurl = \"https://s3.waw3-1.cloudferro.com/mdl-arco-time-035/arco/MEDSEA_MULTIYEAR_PHY_006_004/med-cmcc-ssh-rean-d_202012/timeChunked.zarr\"\nds = ZarrDataset(url);\n# see the metadata\ndisplay(ds)\n# load the variable time\ntime = ds[\"time\"][:]\n# load the the attribute long_name for the variable zos\nzos_long_name = ds[\"zos\"].attrib[\"long_name\"]\n# load the global attribute\ncomment = ds.attrib[\"comment\"]\n# query the dimension of the variable zos\nsize(ds[\"zos\"])\nclose(ds)\n\nExample with a do-block:\n\nusing ZarrDatasets\nurl = \"https://s3.waw3-1.cloudferro.com/mdl-arco-time-035/arco/MEDSEA_MULTIYEAR_PHY_006_004/med-cmcc-ssh-rean-d_202012/timeChunked.zarr\"\n\nzos1 = ZarrDataset(url) do ds\n  ds[\"zos\"][:,:,end,1]\nend # implicit call to close(ds)\n\n\n\n\n\n","category":"type"},{"location":"#Differences-between-Zarr-and-NetCDF-files","page":"Home","title":"Differences between Zarr and NetCDF files","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"All metadata is stored in JSON files for Zarr with the following implications:\nJSON does not distinguish between integers and real numbers. They are all considered as generic numbers. Whole numbers are loaded as Int64 and decimal numbers Float64. It is not possible to store the number 1.0 as a real number.\nThe order of keys in a JSON document is undefined. It is therefore not possible to have a consistent ordering of the attributes or variables.","category":"page"}]
}
